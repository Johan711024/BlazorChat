@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace BlazorChat.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BlazorChat.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="/alert.js"></script>
    <script src="_content/Blazor.Extensions.Canvas/blazor.extensions.canvas.js"></script>
    
    <script>


        function CreateSVG() {
            var xmlns = "http://www.w3.org/2000/svg";
            var boxWidth = 300;
            var boxHeight = 300;

            var svgElem = document.createElementNS(xmlns, "svg");
            svgElem.setAttributeNS(null, "viewBox", "0 0 " + boxWidth + " " + boxHeight);
            svgElem.setAttributeNS(null, "width", boxWidth);
            svgElem.setAttributeNS(null, "height", boxHeight);
            svgElem.style.display = "block";

            var g = document.createElementNS(xmlns, "g");
            svgElem.appendChild(g);
            g.setAttributeNS(null, 'transform', 'matrix(1,0,0,-1,0,300)');

            // draw linear gradient
            var defs = document.createElementNS(xmlns, "defs");
            var grad = document.createElementNS(xmlns, "linearGradient");
            grad.setAttributeNS(null, "id", "gradient");
            grad.setAttributeNS(null, "x1", "0%");
            grad.setAttributeNS(null, "x2", "0%");
            grad.setAttributeNS(null, "y1", "100%");
            grad.setAttributeNS(null, "y2", "0%");
            var stopTop = document.createElementNS(xmlns, "stop");
            stopTop.setAttributeNS(null, "offset", "0%");
            stopTop.setAttributeNS(null, "stop-color", "#ff0000");
            grad.appendChild(stopTop);
            var stopBottom = document.createElementNS(xmlns, "stop");
            stopBottom.setAttributeNS(null, "offset", "100%");
            stopBottom.setAttributeNS(null, "stop-color", "#0000ff");
            grad.appendChild(stopBottom);
            defs.appendChild(grad);
            g.appendChild(defs);

            // draw borders
            var coords = "M 0, 0";
            coords += " l 0, 300";
            coords += " l 300, 0";
            coords += " l 0, -300";
            coords += " l -300, 0";

            var path = document.createElementNS(xmlns, "path");
            path.setAttributeNS(null, 'stroke', "#000000");
            path.setAttributeNS(null, 'stroke-width', 10);
            path.setAttributeNS(null, 'stroke-linejoin', "round");
            path.setAttributeNS(null, 'd', coords);
            path.setAttributeNS(null, 'fill', "url(#gradient)");
            path.setAttributeNS(null, 'opacity', 1.0);
            g.appendChild(path);

            var svgContainer = document.getElementById("svgContainer");
            svgContainer.appendChild(svgElem);
        }




        function gameLoop(timeStamp) {
            window.requestAnimationFrame(gameLoop);
            game.instance.invokeMethodAsync('GameLoop', timeStamp);
        }

        function onResize() {
            if (!window.game.canvas)
                return;

            game.canvas.width = window.innerWidth;
            game.canvas.height = window.innerHeight;

            game.instance.invokeMethodAsync('OnResize', game.canvas.width, game.canvas.height);
        }

        window.gameWindowResize = (instance) => {
            onResize();
        };

        window.initGame = (instance) => {
            var canvasContainer = document.getElementById('canvasContainer'),
                canvases = canvasContainer.getElementsByTagName('canvas') || [];
            window.game = {
                instance: instance,
                canvas: canvases.length ? canvases[0] : null
            };

            window.addEventListener("resize", onResize);

            window.requestAnimationFrame(gameLoop);
        };


        //insert html on the fly
        window.InsertOnTop = (html, containerId) => {
 
            var template = document.createElement('template');
            html = html.trim();
            template.innerHTML = html;
            var element = template.content.firstChild;
 
            var container = document.getElementById(containerId);
            container.prepend(element);
        }

        window.InsertSVGOnTop = (tag,names,values, containerId) => {
            CreateSVG();
            var element = document.createElementNS('http://www.w3.org/2000/svg', tag);
            var i = 0;
            names.forEach(at => {
                console.log('Value: ' + values[i].replaceAll('%20', ' '));
                element.setAttributeNS(null, at, values[i].replaceAll('%20', ' '));
                i++;
            }); 
            console.log('Element2: ' + JSON.stringify(element));
            
            var container = document.getElementById(containerId);
            container.prepend(element);
            
        }
    </script>
</body>
</html>
