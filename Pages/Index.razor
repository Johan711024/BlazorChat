@page "/"
@using System.Drawing
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorChat
@using BlazorChat.Data
@using BlazorChat.Core


@inject IJSRuntime JsRuntime

@inject IJSRuntime JsRuntime;

<img @ref="_spritesheet" hidden src="assets/globe_dark.gif" />

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@* Todo: svg *@
<div id="spinningSprite" >
<svg  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 4335 4335" width="100" height="100">
    <path fill="#008DD2" d="M3346 1077c41,0 75,34 75,75 0,41 -34,75 -75,75 -41,0 -75,-34 -75,-75 0,-41 34,-75 75,-75zm-1198 -824c193,0 349,156 349,349 0,193 -156,349 -349,349 -193,0 -349,-156 -349,-349 0,-193 156,-349 349,-349zm-1116 546c151,0 274,123 274,274 0,151 -123,274 -274,274 -151,0 -274,-123 -274,-274 0,-151 123,-274 274,-274zm-500 1189c134,0 243,109 243,243 0,134 -109,243 -243,243 -134,0 -243,-109 -243,-243 0,-134 109,-243 243,-243zm500 1223c121,0 218,98 218,218 0,121 -98,218 -218,218 -121,0 -218,-98 -218,-218 0,-121 98,-218 218,-218zm1116 434c110,0 200,89 200,200 0,110 -89,200 -200,200 -110,0 -200,-89 -200,-200 0,-110 89,-200 200,-200zm1145 -434c81,0 147,66 147,147 0,81 -66,147 -147,147 -81,0 -147,-66 -147,-147 0,-81 66,-147 147,-147zm459 -1098c65,0 119,53 119,119 0,65 -53,119 -119,119 -65,0 -119,-53 -119,-119 0,-65 53,-119 119,-119z"
    />
</svg>
</div>

<svg xmlns="http://www.w3.org/2000/svg" width="300"
         height="200">' +
            '<foreignObject width="100%" height="100%">' +
               '<div xmlns="http://www.w3.org/1999/xhtml" style="font-size:50px">' +
                  'Simply Easy ' +
                  '<span style="color:blue;">' +
                  'Learning</span>' +
               '</div>' +
            '</foreignObject>' +
         '</svg>

@code
{
    BECanvasComponent _canvas;
    ElementReference _spritesheet;
    
    GameContext _game;

        

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        
        await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));

        _game = await LogoGame.Create(_canvas, _spritesheet);

        // this will make sure that the viewport is correctly initialized
        await JsRuntime.InvokeAsync<object>("gameWindowResize", DotNetObjectReference.Create(this));        
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        if (null == _game) return;
        await _game.Step(timeStamp);
    }

    [JSInvokable]
    public async ValueTask OnResize(int screenWidth, int screenHeight)
    {
        if (null == _game) return;
        _game.Display.Size = new Size(screenWidth, screenHeight);
    }
}
